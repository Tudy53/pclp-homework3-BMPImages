#include "utils.h"

BMP *read_bmp(FILE *in) {
    BMP *image = allocBMP();
    if (image == NULL) {
        printf("Alocarea nu a avut loc!\n");
        return NULL;
    }

    fread(image->fileheader, sizeof(bmp_fileheader), 1, in);
    fread(image->infoheader, sizeof(bmp_infoheader), 1, in);
    image->bitmap->pixeli = (Pixel **)malloc(image->infoheader->height * sizeof(Pixel *));
    if (image->bitmap->pixeli == NULL) {
        return NULL;
    }

    for (int i = 0; i < image->infoheader->height; i++) {
        image->bitmap->pixeli[i] = (Pixel *)malloc(image->infoheader->width * sizeof(Pixel));
        if (image->bitmap->pixeli[i] == NULL) {
            return NULL;
        }
    }

    int padding = 4 - ((3 * image->infoheader->width) % 4);
    if (padding == 4) {
        padding = 0;
    }

    for (int i = image->infoheader->height - 1; i >= 0; i--) {
        for (int j = 0; j < image->infoheader->width; j++) {
            fread(&(image->bitmap->pixeli[i][j]), sizeof(Pixel), 1, in);
        }
        if (fseek(in, padding, SEEK_CUR) != 0) {
            printf("Ignorarea paddingului nu a avut loc!\n");
            return NULL;
        }
    }

    return image;
}

BMP *edit() {
    char *citire = (char *)malloc(MAX_NR_CH_COMMAND * sizeof(char));
    if (citire == NULL) {
        printf("Alocarea nu a avut loc!\n");
        return NULL;
    }

    scanf("%s", citire);

    FILE *in = fopen(citire, "rb");
    BMP *image = read_bmp(in);

    free(citire);
    fclose(in);
    return image;
}

/*Creion *set(Creion *creion) {
    char *command2 = (char *)malloc(MAX_NR_CH_COMMAND * sizeof(char));
    if (command2 == NULL) {
        printf("Alocarea nu a avut loc!\n");
        return 0;
    }

    scanf("%s", command2);


    if (strcmp(command2, "draw_color") == 0) {
        scanf("%d", &creion->r);
        scanf("%d", &creion->g);
        scanf("%d", &creion->b);
    }

    if (strcmp(command2, "line_width") == 0) {
        scanf("%d", &creion->dimensiune);
    }

    return creion;
}

int modul(int nr1, int nr2) {
    if(nr2-nr1 >= 0) {
        return nr2-nr1;
    }
    return nr1-nr2;
}

int minim(int nr1, int nr2) {
    if(nr2-nr1 >= 0) {
        return nr1;
    }
    return nr2;
}

int maxim(int nr1, int nr2) {
    if(nr2-nr1 >= 0) {
        return nr2;
    }
    return nr1;
}*/

/*Pixel color_pixel(BMP *image, Creion *creion, int x, int y) {
    int dim = creion->dimensiune / 2;
    for (int i = x - dim; i <= x + dim; i++) {
        for (int j = y - dim; j <= y + dim; j++) {
            image->bitmap->pixeli[x][y].R = creion->r;
            image->bitmap->pixeli[x][y].G = creion->g;
            image->bitmap->pixeli[x][y].B = creion->b;
        }
    }
    return image->bitmap->pixeli[x][y];
}

BMP *color(BMP *image, Creion *creion, int x1, int y1, int x2, int y2) {
    
    int x, y, dif_x, dif_y;
    dif_x = x2 - x1;
    dif_y = y2 - y1;
    if (modul(y2, y1) > modul(x2, x1)) {
        for (y = minim(y1, y2); y <= maxim(y1, y2); y++) {
            x = x1 + ((y - y1) * dif_x) / dif_y;
            color_pixel(image, creion, x, y);
        }
    }

    if (modul(y2, y1) <= modul(x2, x1)) {
        for (x = minim(x1, x2); y <= maxim(x1, x2); x++) {
            y = y1 + ((x - x1) * dif_y) / dif_x;
            color_pixel(image, creion, x, y);
        }
    }
    return image;
}

BMP *rectangle(BMP *image, Creion *creion) {
    int y1, x1, y2, x2, y3, x3, y4, x4, width, height;
    scanf("%d", &x1);
    scanf("%d", &y1);

    y2 = y1 - height;
    x2 = x1;
    y3 = y2;
    x3 = y2 + width;
    y4 = y3 - height;
    x4 = x3;
    color(image, creion, y1, x1, y2, x2);
    color(image, creion, y2, x2, y3, x3);
    color(image, creion, y3, x3, y4, x4);
    color(image, creion, y4, x4, y1, x1);

    return image;
}

BMP *triangle(BMP *image, Creion *creion) {
    int y1, x1, y2, x2, y3, x3;
    scanf("%d", &x1);
    scanf("%d", &y1);
    scanf("%d", &x2);
    scanf("%d", &y2);
    scanf("%d", &x3);
    scanf("%d", &y3);
    color(image, creion, x1, y1, x2, y2);
    color(image, creion, x1, y1, x3, y3);
    color(image, creion, x2, y2, x3, y3);
    return image;
}*/

/*BMP *draw(BMP *image, Creion *creion) {
    char *command2 = (char *)malloc(MAX_NR_CH_COMMAND * sizeof(char));
    if (command2 == NULL) {
        printf("Alocarea nu a avut loc!\n");
        return 0;
    }

    scanf("%s", command2);


    if (strcmp(command2, "line") == 0) {
        int y1, x1, y2, x2;
        scanf("%d", &x1);
        scanf("%d", &y1);
        scanf("%d", &x2);
        scanf("%d", &y2);
        image = color(image, creion, x1, y1, x2, y2);
    }

    if (strcmp(command2, "rectangle") == 0) {
        image = rectangle(image, creion);
    }

    if (strcmp(command2, "triangle") == 0) {
        image = triangle(image, creion);
    }

    return image;
}*/

/*BMP *insert(BMP *image) {
    char *calea = (char *)malloc(MAX_NR_CH_COMMAND * sizeof(char));
    if (calea == NULL) {
        printf("Alocarea nu a avut loc!\n");
        return NULL;
    }

    scanf("%s", calea);
    int x, y;
    scanf("%d", &y);
    scanf("%d", &x);

    FILE *in_insert = fopen(calea, "rb");
    BMP *image_to_insert = read_bmp(in_insert);
    free(calea);
    fclose(in_insert);

    int width1 = image->infoheader->width;
    int height1 = image->infoheader->height;
    int width2 = image_to_insert->infoheader->width;
    int height2 = image_to_insert->infoheader->height;


    if (y >= width1 || x >= height1) {
        printf("Coordonate gresite!\n");
        return image;
    }

    x = height1 - x - 1;


    int copie_y = y;

    for (int i = height2 - 1; i >= 0 && x >= 0; i--, x--) {
        for (int j = 0, y = copie_y; j < width2 && y < width1; j++, y++) {
            image->bitmap->pixeli[x][y] = image_to_insert->bitmap->pixeli[i][j];
        }
    }

    return image;
}*/

void save(BMP *image) {
    char *destinatie = (char *)malloc(MAX_NR_CH_COMMAND * sizeof(char));
    if (destinatie == NULL) {
        printf("Alocarea nu a avut loc!\n");
        return;
    }

    scanf("%s", destinatie);
    FILE *out = fopen(destinatie, "wb");

    fwrite(image->fileheader, sizeof(bmp_fileheader), 1, out);
    fwrite(image->infoheader, sizeof(bmp_infoheader), 1, out);

    char octet_padding = 0;
    int padding = 4 - ((3 * image->infoheader->width) % 4);
    if (padding == 4) {
        padding = 0;
    }

    for (int i = image->infoheader->height - 1; i >= 0; i--) {
        for (int j = 0; j < image->infoheader->width; j++) {
            fwrite(&(image->bitmap->pixeli[i][j]), sizeof(Pixel), 1, out);
        }
        fwrite(&octet_padding, sizeof(char), padding, out);
    }

    fclose(out);
    free(destinatie);
}

void quit(BMP *image) {
    freeBMP(image);
}

int main() {
    char *command1 = (char *)malloc(MAX_NR_CH_COMMAND * sizeof(char));
    if (command1 == NULL) {   
        printf("Alocarea nu a avut loc!\n");
        return -1;
    }

    /*Creion *creion = (Creion *)malloc(sizeof(Creion));
    if (creion == NULL) {
        printf("Alocarea nu a avut loc!\n");
        return -1;
    }*/

    BMP *image;

    while (scanf("%s", command1) != EOF) {
        if (strcmp(command1, "edit") == 0) {
            image = edit();
        }

        /*if (strcmp(command1, "set") == 0) {
            creion = set(creion);
        }*/

        /*if (strcmp(command1, "draw") == 0) {
            image = draw(image, creion);
        }*/

        /*if (strcmp(command1, "insert") == 0) {
            image = insert(image);
        }*/

        if (strcmp(command1, "save") == 0) {
            save(image);
        }

        if (strcmp(command1, "quit") == 0) {
            quit(image);
        }
    }
    free(command1);
    return 0;
}